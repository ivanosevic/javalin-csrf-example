package edu.pucmm.eict.javalincsrf.security.csrf;

import io.javalin.http.Context;

import java.security.SecureRandom;
import java.util.Base64;
import java.util.UUID;

/**
 * The CSRF Repository holds and generates the CSRF Tokens in
 * the user session given the HttpContext of Javalin.
 */
public class CsrfRepository {

    public CsrfRepository() {
    }

    /**
     * Generate a new brand CSRF-Token, overriding the
     * previous token, regardless of its value.
     */
    public void newToken(Context ctx) {
        // Per OWASP recommendations, CSRF tokens should be:
        // - Unique per user session.
        // - Secret
        // - Unpredictable (large random value generated by a secure method).
        var secureRandom = new SecureRandom();
        byte[] tokenAsBytes = new byte[128];
        secureRandom.nextBytes(tokenAsBytes);
        String tokenAsString = Base64.getEncoder().encodeToString(tokenAsBytes);
        ctx.sessionAttribute("csrf", tokenAsString);
    }

    /**
     * Gets the current valid CSRF-Token for user to consume.
     * @return Active CSRF Token
     */
    public String get(Context ctx) {
        return ctx.sessionAttribute("csrf");
    }
}
